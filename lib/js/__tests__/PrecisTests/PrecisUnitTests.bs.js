// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var List = require("bs-platform/lib/js/list.js");
var PrecisBidi$BsPrecis = require("../../src/PrecisBidi.bs.js");
var PrecisUtils$BsPrecis = require("../../src/PrecisUtils.bs.js");
var PrecisClasses$BsPrecis = require("../../src/PrecisClasses.bs.js");
var PrecisMapping$BsPrecis = require("../../src/PrecisMapping.bs.js");
var PrecisProfiles$BsPrecis = require("../../src/PrecisProfiles.bs.js");
var PrecisCodePoints$BsPrecis = require("../../src/PrecisCodePoints.bs.js");

function identifierTest1(param) {
  return Jest.Expect[/* toEqual */12]("٠١٢٩", Jest.Expect[/* expect */0](PrecisUtils$BsPrecis.fromCodePointList(PrecisClasses$BsPrecis.identifierEnforce(PrecisUtils$BsPrecis.toCodePointList("٠١٢٩")))));
}

function codePointCheck(param) {
  var results = List.map(PrecisCodePoints$BsPrecis.fromCodePoint, /* :: */[
        531454,
        /* :: */[
          788451,
          /* :: */[
            54483,
            /* :: */[
              115221,
              /* :: */[
                249866,
                /* :: */[
                  530580,
                  /* :: */[
                    126,
                    /* :: */[
                      32,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]);
  return Jest.Expect[/* toEqual */12](/* :: */[
              /* UNASSIGNED */3,
              /* :: */[
                /* UNASSIGNED */3,
                /* :: */[
                  /* PVALID */2,
                  /* :: */[
                    /* UNASSIGNED */3,
                    /* :: */[
                      /* UNASSIGNED */3,
                      /* :: */[
                        /* UNASSIGNED */3,
                        /* :: */[
                          /* PVALID */2,
                          /* :: */[
                            /* FREEPVAL */4,
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ], Jest.Expect[/* expect */0](results));
}

function identifierTest2(param) {
  return Jest.Expect[/* toEqual */12]("abc", Jest.Expect[/* expect */0](PrecisUtils$BsPrecis.fromCodePointList(PrecisClasses$BsPrecis.identifierEnforce(PrecisUtils$BsPrecis.toCodePointList("abc")))));
}

function identifierTest3(param) {
  return Jest.Expect[/* toEqual */12]("123", Jest.Expect[/* expect */0](PrecisUtils$BsPrecis.fromCodePointList(PrecisClasses$BsPrecis.identifierEnforce(PrecisUtils$BsPrecis.toCodePointList("123")))));
}

function identifierTest4(param) {
  return Jest.Expect[/* toEqual */12]("\'्", Jest.Expect[/* expect */0](PrecisUtils$BsPrecis.fromCodePointList(PrecisClasses$BsPrecis.identifierEnforce(PrecisUtils$BsPrecis.toCodePointList("\'्")))));
}

function identifierTest5(param) {
  return Jest.Expect[/* toEqual */12]("AbCdEfgh123", Jest.Expect[/* expect */0](PrecisUtils$BsPrecis.fromCodePointList(PrecisClasses$BsPrecis.identifierEnforce(PrecisUtils$BsPrecis.toCodePointList("AbCdEfgh123")))));
}

function identifierInvalidTest1(param) {
  return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                    return PrecisClasses$BsPrecis.identifierEnforce(/* :: */[
                                1564,
                                /* [] */0
                              ]);
                  })));
}

function identifierInvalidTest2(param) {
  return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                    return PrecisClasses$BsPrecis.identifierEnforce(/* :: */[
                                8203,
                                /* [] */0
                              ]);
                  })));
}

function identifierInvalidTest3(param) {
  var given = PrecisUtils$BsPrecis.toCodePointList("\xd7\x96\xd7\x96\xd6\xb6 \xd6\xb6 \xd7\x96\xd6\xb6\xd6\xb6  \xd6\xb6 \xd6\xb6 a\xd6\xb6 \xd6\xb6 bc\xd7\x96\xd7\x96\xd7\x96");
  return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                    return PrecisClasses$BsPrecis.identifierEnforce(given);
                  })));
}

function usernameInvalidTest1(param) {
  var given = PrecisUtils$BsPrecis.fromCodePointList(/* :: */[
        1564,
        /* [] */0
      ]);
  return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                    return PrecisProfiles$BsPrecis.usernameCaseMapped(given);
                  })));
}

function usernameInvalidTest2(param) {
  var given = PrecisUtils$BsPrecis.fromCodePointList(/* :: */[
        8203,
        /* [] */0
      ]);
  return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                    return PrecisProfiles$BsPrecis.usernameCaseMapped(given);
                  })));
}

function usernameInvalidTest3(param) {
  return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                    return PrecisProfiles$BsPrecis.usernameCaseMapped("\xd7\x96\xd7\x96\xd6\xb6 \xd6\xb6 \xd7\x96\xd6\xb6\xd6\xb6  \xd6\xb6 \xd6\xb6 a\xd6\xb6 \xd6\xb6 bc\xd7\x96\xd7\x96\xd7\x96");
                  })));
}

function bidiTestsValid(param) {
  var l = "A";
  var r = String.fromCodePoint(1489);
  var al = String.fromCodePoint(1569);
  var en = "0";
  var nsm = String.fromCodePoint(768);
  var p = "*";
  var tests_001 = /* :: */[
    "A*A",
    /* :: */[
      r,
      /* :: */[
        r + r,
        /* :: */[
          al + r,
          /* :: */[
            al + (en + r),
            /* :: */[
              al + (r + en),
              /* :: */[
                r + (p + r),
                /* :: */[
                  r + (p + (r + (nsm + nsm))),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var tests = /* :: */[
    l,
    tests_001
  ];
  return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](List.fold_left((function (acc, string) {
                        if (PrecisBidi$BsPrecis.validate(PrecisUtils$BsPrecis.toCodePointList(string))) {
                          return acc;
                        } else {
                          return false;
                        }
                      }), true, tests)));
}

function bidiTestsInvalid(param) {
  var l = "A";
  var r = String.fromCodePoint(1489);
  var en = "0";
  var an = String.fromCodePoint(69216);
  var p = "*";
  var tests_001 = /* :: */[
    "A*",
    /* :: */[
      l + (r + l),
      /* :: */[
        p + r,
        /* :: */[
          r + p,
          /* :: */[
            r + (l + r),
            /* :: */[
              en + r,
              /* :: */[
                r + (an + en),
                /* :: */[
                  r + (en + (an + r)),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ];
  var tests = /* :: */[
    "*A",
    tests_001
  ];
  return Jest.Expect[/* toEqual */12](true, Jest.Expect[/* expect */0](List.fold_left((function (acc, string) {
                        if (PrecisBidi$BsPrecis.validate(PrecisUtils$BsPrecis.toCodePointList(string))) {
                          return false;
                        } else {
                          return acc;
                        }
                      }), true, tests)));
}

function validUsername(param) {
  return Jest.Expect[/* toEqual */12]("Justin", Jest.Expect[/* expect */0](PrecisProfiles$BsPrecis.usernameCasePreserved("Justin")));
}

function checkChangeUsername(param) {
  return Jest.Expect[/* toEqual */12]("JustiN", Jest.Expect[/* expect */0](PrecisProfiles$BsPrecis.usernameCasePreserved("JustiN")));
}

function checkMapping(param) {
  var username = "justin";
  return Jest.Expect[/* toEqual */12](username, Jest.Expect[/* expect */0](PrecisUtils$BsPrecis.fromCodePointList(PrecisMapping$BsPrecis.mapWidth(PrecisUtils$BsPrecis.toCodePointList(username)))));
}

function checkLowerCase(param) {
  var username = "justin";
  return Jest.Expect[/* toEqual */12](username, Jest.Expect[/* expect */0](PrecisUtils$BsPrecis.fromCodePointList(PrecisMapping$BsPrecis.toLower(PrecisUtils$BsPrecis.toCodePointList(username)))));
}

Jest.describe("Precis Test", (function (param) {
        Jest.test("Identifier Class Test 1", identifierTest1);
        Jest.test("Identifier Class Test 2", identifierTest2);
        Jest.test("Identifier Class Test 3", identifierTest3);
        Jest.test("Identifier Class Test 4", identifierTest4);
        Jest.test("Identifier Class Test 5", identifierTest5);
        Jest.test("Code Point Test", codePointCheck);
        Jest.test("Identifier Class Invalid Test 1", identifierInvalidTest1);
        Jest.test("Identifier Class Invalid Test 2", identifierInvalidTest2);
        Jest.test("Identifier Class Invalid Test 3", identifierInvalidTest3);
        Jest.test("Check Valid Nicknames", bidiTestsValid);
        Jest.test("Check Invalid Nicknames", bidiTestsInvalid);
        Jest.test("Check mapping stack overflow", checkMapping);
        Jest.test("Check lowerCase stack overflow", checkLowerCase);
        Jest.test("Check usernameCaseMapped `justin`", validUsername);
        return Jest.test("Check checkChangeUsername `JustiN`", checkChangeUsername);
      }));

exports.identifierTest1 = identifierTest1;
exports.codePointCheck = codePointCheck;
exports.identifierTest2 = identifierTest2;
exports.identifierTest3 = identifierTest3;
exports.identifierTest4 = identifierTest4;
exports.identifierTest5 = identifierTest5;
exports.identifierInvalidTest1 = identifierInvalidTest1;
exports.identifierInvalidTest2 = identifierInvalidTest2;
exports.identifierInvalidTest3 = identifierInvalidTest3;
exports.usernameInvalidTest1 = usernameInvalidTest1;
exports.usernameInvalidTest2 = usernameInvalidTest2;
exports.usernameInvalidTest3 = usernameInvalidTest3;
exports.bidiTestsValid = bidiTestsValid;
exports.bidiTestsInvalid = bidiTestsInvalid;
exports.validUsername = validUsername;
exports.checkChangeUsername = checkChangeUsername;
exports.checkMapping = checkMapping;
exports.checkLowerCase = checkLowerCase;
/*  Not a pure module */

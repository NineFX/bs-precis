// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var PrecisProfiles$BsPrecis = require("../../src/PrecisProfiles.bs.js");

function decoder(json) {
  return /* record */[
          /* profile */Json_decode.field("profile", Json_decode.string, json),
          /* input */Json_decode.field("input", Json_decode.string, json),
          /* output */Json_decode.optional((function (param) {
                  return Json_decode.field("output", Json_decode.string, param);
                }), json),
          /* error */Json_decode.optional((function (param) {
                  return Json_decode.field("error", Json_decode.string, param);
                }), json)
        ];
}

function testSingle(elem) {
  var match = elem[/* output */2];
  if (match !== undefined) {
    var output = match;
    var match$1 = elem[/* profile */0];
    switch (match$1) {
      case "NicknameCaseMapped" : 
          return Jest.Expect[/* toBe */2](output, Jest.Expect[/* expect */0](PrecisProfiles$BsPrecis.nickname(elem[/* input */1])));
      case "OpaqueString" : 
          return Jest.Expect[/* toBe */2](output, Jest.Expect[/* expect */0](PrecisProfiles$BsPrecis.opaqueString(elem[/* input */1])));
      case "UsernameCaseMapped" : 
          return Jest.Expect[/* toBe */2](output, Jest.Expect[/* expect */0](PrecisProfiles$BsPrecis.usernameCaseMapped(elem[/* input */1])));
      case "UsernameCasePreserved" : 
          return Jest.Expect[/* toBe */2](output, Jest.Expect[/* expect */0](PrecisProfiles$BsPrecis.usernameCasePreserved(elem[/* input */1])));
      default:
        return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](true));
    }
  } else {
    var match$2 = elem[/* profile */0];
    switch (match$2) {
      case "NicknameCaseMapped" : 
          return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                            return PrecisProfiles$BsPrecis.nickname(elem[/* input */1]);
                          })));
      case "OpaqueString" : 
          return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                            return PrecisProfiles$BsPrecis.opaqueString(elem[/* input */1]);
                          })));
      case "UsernameCaseMapped" : 
          return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                            return PrecisProfiles$BsPrecis.usernameCaseMapped(elem[/* input */1]);
                          })));
      case "UsernameCasePreserved" : 
          return Jest.Expect[/* toThrow */18](Jest.Expect[/* expect */0]((function (param) {
                            return PrecisProfiles$BsPrecis.usernameCasePreserved(elem[/* input */1]);
                          })));
      default:
        return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](true));
    }
  }
}

function testBuilder(elem) {
  return Jest.test(elem[/* profile */0] + (" Test: " + elem[/* input */1]), (function (param) {
                return testSingle(elem);
              }));
}

function test1(param) {
  return Jest.Expect[/* toBe */2](true, Jest.Expect[/* expect */0](true));
}

Jest.describe("Golden Tests", (function (param) {
        Jest.test("Golden Test", test1);
        var data = Json.parseOrRaise(Fs.readFileSync("__tests__/PrecisTests/golden.json", "utf8"));
        var tests = Json_decode.list(decoder, data);
        return Belt_List.forEach(tests, testBuilder);
      }));

exports.decoder = decoder;
exports.testSingle = testSingle;
exports.testBuilder = testBuilder;
exports.test1 = test1;
/*  Not a pure module */

// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var PrecisCodePoints$BsPrecis = require("./PrecisCodePoints.bs.js");

function context(codePointList) {
  var _codePointList = codePointList;
  var _precisCodePoints = List.map(PrecisCodePoints$BsPrecis.fromCodePoint, codePointList);
  var _acc = /* [] */0;
  var _precisAcc = /* [] */0;
  while(true) {
    var precisAcc = _precisAcc;
    var acc = _acc;
    var precisCodePoints = _precisCodePoints;
    var codePointList$1 = _codePointList;
    if (precisCodePoints) {
      var cp = precisCodePoints[0];
      var exit = 0;
      var exit$1 = 0;
      var match = precisCodePoints[1];
      if (match) {
        var match$1 = match[0];
        if (match$1 >= 2) {
          exit$1 = 2;
        } else {
          var precisTail = match[1];
          if (codePointList$1) {
            var match$2 = codePointList$1[1];
            if (match$2) {
              var cpTail = match$2[1];
              var cp2 = match$2[0];
              var cp1 = codePointList$1[0];
              if (cp2 === 8204) {
                _precisAcc = Pervasives.$at(/* :: */[
                      match$1,
                      /* :: */[
                        cp,
                        /* [] */0
                      ]
                    ], precisAcc);
                _acc = Pervasives.$at(/* :: */[
                      cp2,
                      /* :: */[
                        cp1,
                        /* [] */0
                      ]
                    ], acc);
                _precisCodePoints = precisTail;
                _codePointList = cpTail;
                continue ;
              } else if (cp2 === 8205) {
                _precisAcc = Pervasives.$at(/* :: */[
                      match$1,
                      /* :: */[
                        cp,
                        /* [] */0
                      ]
                    ], precisAcc);
                _acc = Pervasives.$at(/* :: */[
                      cp2,
                      /* :: */[
                        cp1,
                        /* [] */0
                      ]
                    ], acc);
                _precisCodePoints = precisTail;
                _codePointList = cpTail;
                continue ;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            return false;
          }
        }
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (cp >= 2) {
          exit = 1;
        } else {
          var match$3 = precisCodePoints[1];
          if (match$3) {
            if (codePointList$1) {
              var match$4 = codePointList$1[1];
              if (match$4) {
                var cp1$1 = codePointList$1[0];
                if (cp1$1 !== 0) {
                  _precisAcc = Pervasives.$at(/* :: */[
                        match$3[0],
                        /* :: */[
                          cp,
                          /* [] */0
                        ]
                      ], precisAcc);
                  _acc = Pervasives.$at(/* :: */[
                        match$4[0],
                        /* :: */[
                          cp1$1,
                          /* [] */0
                        ]
                      ], acc);
                  _precisCodePoints = match$3[1];
                  _codePointList = match$4[1];
                  continue ;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            exit = 1;
          }
        }
      }
      if (exit === 1) {
        _precisAcc = Pervasives.$at(/* :: */[
              cp,
              /* [] */0
            ], precisAcc);
        _acc = Pervasives.$at(/* :: */[
              List.hd(codePointList$1),
              /* [] */0
            ], acc);
        _precisCodePoints = precisCodePoints[1];
        _codePointList = List.tl(codePointList$1);
        continue ;
      }
      
    } else {
      return true;
    }
  };
}

exports.context = context;
/* No side effect */
